{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Chat\\\\UserInterface\\\\src\\\\Components\\\\Title.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Services from \"../Environment\";\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Title = () => {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hey! , Iam PSR Engineering Chat-bot ? How Can I Help You ? \",\n    sender: \"PSR Chatbot\",\n    direction: \"incoming\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"User\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    const ans = await axios.post(`${Services.SERVER_URL}/message`, {\n      message: message\n    }).then(res => {\n      console.log(res.data);\n      const modeMessage = {\n        message: res.data.answer,\n        sender: \"PSR Chatbot\",\n        direction: \"incoming\"\n      };\n      const received = [...newMessages, modeMessage];\n      setTyping(false);\n      setMessages(received);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      responsive: true,\n      style: {\n        height: \"90vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n            content: \"Please Wait \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 24\n          }, this) : null,\n          children: messages.map((msg, i) => {\n            return /*#__PURE__*/_jsxDEV(Message, {\n              model: msg\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Ask question... \",\n          onSend: handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Title, \"LACmUuNQoDiionTE1f/TAI/40e4=\");\n_c = Title;\nexport default Title;\nvar _c;\n$RefreshReg$(_c, \"Title\");","map":{"version":3,"names":["React","useState","axios","Services","styles","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Title","_s","typing","setTyping","messages","setMessages","message","sender","direction","handleSend","newMessage","newMessages","ans","post","SERVER_URL","then","res","console","log","data","modeMessage","answer","received","children","responsive","style","height","typingIndicator","content","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Chat/UserInterface/src/Components/Title.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Services from \"../Environment\";\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator,\n} from \"@chatscope/chat-ui-kit-react\";\n\nconst Title = () => {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hey! , Iam PSR Engineering Chat-bot ? How Can I Help You ? \",\n      sender: \"PSR Chatbot\",\n      direction: \"incoming\",\n    },\n  ]);\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"User\",\n      direction: \"outgoing\",\n    };\n\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    const ans = await axios\n      .post(`${Services.SERVER_URL}/message`, {\n        message: message,\n      })\n      .then((res) => {\n        console.log(res.data);\n        const modeMessage = {\n          message: res.data.answer,\n          sender: \"PSR Chatbot\",\n          direction: \"incoming\",\n        };\n\n        const received = [...newMessages, modeMessage];\n        setTyping(false);\n        setMessages(received);\n      });\n  };\n\n  return (\n    <div>\n      <MainContainer\n        responsive\n        style={{\n          height: \"90vh\",\n        }}\n      >\n        <ChatContainer>\n          <MessageList\n            typingIndicator={\n              typing ? <TypingIndicator content=\"Please Wait \" /> : null\n            }\n          >\n            {messages.map((msg, i) => {\n              return <Message key={i} model={msg} />;\n            })}\n          </MessageList>\n          <MessageInput placeholder=\"Ask question... \" onSend={handleSend} />\n        </ChatContainer>\n      </MainContainer>\n    </div>\n  );\n};\n\nexport default Title;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}